{"version":3,"sources":["utils/constants.js","components/ItemsList.js","components/App.js","serviceWorker.js","index.js"],"names":["API_ROOT","HEADERS","Content-Type","Accept","ItemsList","onCompleteHandler","itemId","e","preventDefault","console","info","fetch","concat","method","headers","body","JSON","stringify","is_done","_this2","this","react_default","a","createElement","props","items","map","item","index","onClick","id","key","description","length","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","then","res","json","setState","state","onChangeHandler","event","itemInput","target","value","onSubmitHandler","handleReceivedItems","response","lib","channel","onReceived","components_ItemsList","className","onSubmit","onChange","Boolean","window","location","hostname","match","ReactDOM","render","url","components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mNAAaA,EAAW,2CAEXC,EAAU,CACrBC,eAAgB,mBAChBC,OAAQ,oBCmCKC,6MAnCbC,kBAAoB,SAACC,GAAD,OAAY,SAACC,GAC/BA,EAAEC,iBAEFC,QAAQC,KAAK,yBAA0BJ,GAEvCK,MAAK,GAAAC,OAAIZ,EAAJ,WAAAY,OAAsBN,GAAU,CACnCO,OAAQ,MACRC,QAASb,EACTc,KAAMC,KAAKC,UAAU,CAACC,SAAS,gFAM1B,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UACGH,KAAKI,MAAMC,MAAMC,IAAI,SAACC,EAAMC,GAC3B,OACEP,EAAAC,EAAAC,cAAA,MACEM,QAASV,EAAKd,kBAAkBsB,EAAKG,IACrCC,IAAKH,GAEJD,EAAKK,gBARhB,gBAagBZ,KAAKI,MAAMC,MAAMQ,eA9BfC,aC4DTC,cAxDb,SAAAA,EAAYX,GAAO,IAAAY,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAjB,KAAAe,IACjBC,EAAAC,OAAAE,EAAA,EAAAF,CAAAjB,KAAAiB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAArB,KAAMI,KAORkB,kBAAoB,WAClB/B,MAAK,GAAAC,OAAIZ,EAAJ,WACF2C,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAlB,GAAK,OAAIW,EAAKU,SAAS,CAAErB,YAC/BhB,QAAQC,KAAK,6BAA8B0B,EAAKW,QAZjCX,EAenBY,gBAAkB,SAACC,GACjBb,EAAKU,SAAS,CAAEI,UAAWD,EAAME,OAAOC,SAhBvBhB,EAmBnBiB,gBAAkB,SAACJ,GACjBA,EAAMzC,iBAENG,MAAK,GAAAC,OAAIZ,EAAJ,UAAsB,CACzBa,OAAQ,OACRC,QAASb,EACTc,KAAMC,KAAKC,UAAU,CAACe,YAAaI,EAAKW,MAAMG,cAGhDd,EAAKU,SAAS,CAAEI,UAAW,MA5BVd,EA+BnBkB,oBAAsB,SAAAC,GACpB9C,QAAQC,KAAK,2BAA4B6C,GAEzCnB,EAAKU,SAAS,CAAErB,MAAO8B,KAhCvBnB,EAAKW,MAAQ,CACXG,UAAW,GACXzB,MAAO,IAJQW,wEAsCjB,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACiC,EAAA,oBAAD,CACEC,QAAS,CAAEA,QAAS,gBACpBC,WAAYtC,KAAKkC,sBAGnBjC,EAAAC,EAAAC,cAACoC,EAAD,CAAWlC,MAAOL,KAAK2B,MAAMtB,QAE7BJ,EAAAC,EAAAC,cAAA,QAAMqC,UAAU,MAAMC,SAAUzC,KAAKiC,iBACnChC,EAAAC,EAAAC,cAAA,SAAO6B,MAAOhC,KAAK2B,MAAMG,UAAWY,SAAU1C,KAAK4B,kBACnD3B,EAAAC,EAAAC,cAAA,iCAlDQW,aCME6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACPhD,EAAAC,EAAAC,cAACiC,EAAA,oBAAD,CAAqBc,IJRI,gDISvBjD,EAAAC,EAAAC,cAACgD,EAAD,OAEFC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.d40e0bc2.chunk.js","sourcesContent":["export const API_ROOT = 'https://todolist-app-cable.herokuapp.com';\nexport const API_WS_ROOT = 'wss://todolist-app-cable.herokuapp.com/cable';\nexport const HEADERS = {\n  'Content-Type': 'application/json',\n  Accept: 'application/json',\n};\n","import React, { Component } from 'react';\nimport { API_ROOT, HEADERS } from '../utils/constants';\n\nclass ItemsList extends Component {\n  onCompleteHandler = (itemId) => (e) => {\n    e.preventDefault();\n\n    console.info(\"***** Completed Item: \", itemId)\n\n    fetch(`${API_ROOT}/items/${itemId}`, {\n      method: 'PUT',\n      headers: HEADERS,\n      body: JSON.stringify({is_done: true})\n    });\n\n    //this.setState({ itemInput: '' });\n  }\n\n  render() {\n    return (\n      <div>\n        <ul>\n          {this.props.items.map((item, index) => {\n            return (\n              <li\n                onClick={this.onCompleteHandler(item.id)}\n                key={index}\n              >\n                {item.description}\n              </li>\n            );\n          })}\n        </ul>\n        Total Items: {this.props.items.length}\n      </div>\n    );\n  };\n};\n\nexport default ItemsList;\n","import React, { Component } from 'react';\nimport { ActionCableConsumer } from 'react-actioncable-provider';\n\nimport ItemsList from './ItemsList';\nimport { API_ROOT, HEADERS } from '../utils/constants';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      itemInput: '',\n      items: []\n    };\n  }\n\n  componentDidMount = () => {\n    fetch(`${API_ROOT}/items`)\n      .then(res => res.json())\n      .then(items => this.setState({ items }));\n      console.info(\"***** Component DidMount: \", this.state)\n  };\n\n  onChangeHandler = (event) => {\n    this.setState({ itemInput: event.target.value });\n  }\n\n  onSubmitHandler = (event) => {\n    event.preventDefault();\n\n    fetch(`${API_ROOT}/items`, {\n      method: 'POST',\n      headers: HEADERS,\n      body: JSON.stringify({description: this.state.itemInput})\n    });\n\n    this.setState({ itemInput: '' });\n  }\n\n  handleReceivedItems = response => {\n    console.info(\"***** Channel Response: \", response);\n\n    this.setState({ items: response });\n  };\n\n  render() {\n    return (\n      <div>\n        <ActionCableConsumer\n          channel={{ channel: 'ItemsChannel' }}\n          onReceived={this.handleReceivedItems}\n        />\n\n        <ItemsList items={this.state.items} />\n\n        <form className=\"App\" onSubmit={this.onSubmitHandler}>\n          <input value={this.state.itemInput} onChange={this.onChangeHandler} />\n          <button>Submit</button>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ActionCableProvider } from 'react-actioncable-provider';\n\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\nimport { API_WS_ROOT } from './utils/constants';\n\nReactDOM.render(\n  <ActionCableProvider url={API_WS_ROOT}>\n    <App />\n  </ActionCableProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}